import requests
import matplotlib.pyplot as plt
import pandas as pd
import datetime
import os

# GitLab Configuration
GITLAB_URL = "https://gitlab.com/api/v4"
GITLAB_PRIVATE_TOKEN = "your_private_token"
GITLAB_PROJECT_ID = "your_project_id"
HEADERS = {"PRIVATE-TOKEN": GITLAB_PRIVATE_TOKEN}

def get_issues():
    url = f"{GITLAB_URL}/projects/{GITLAB_PROJECT_ID}/issues"
    response = requests.get(url, headers=HEADERS)
    return response.json()

def process_issues(issues):
    data = []
    for issue in issues:
        created_at = datetime.datetime.strptime(issue['created_at'], "%Y-%m-%dT%H:%M:%S.%fZ")
        closed_at = None
        if issue['state'] == 'closed' and issue.get('closed_at'):
            closed_at = datetime.datetime.strptime(issue['closed_at'], "%Y-%m-%dT%H:%M:%S.%fZ")
        data.append({"title": issue['title'], "created_at": created_at, "closed_at": closed_at})
    return pd.DataFrame(data)

def save_plot(fig, filename):
    filepath = os.path.join("reports", filename)
    fig.savefig(filepath)
    return filename  # Return filename instead of full path for HTML referencing

def plot_chart(df, title, xlabel, ylabel, filename, plot_func):
    fig, ax = plt.subplots(figsize=(10, 5))
    plot_func(ax, df)
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.legend()
    ax.grid()
    filepath = save_plot(fig, filename)
    plt.close(fig)
    return filepath

def generate_html_report(images):
    html_content = """
    <html>
    <head><title>Agile Sprint Report</title></head>
    <body>
    <h1>Agile Sprint Report</h1>
    """
    for title, img in images.items():
        html_content += f'<h2>{title}</h2><img src="{img}" width="800"><br><br>'
    html_content += "</body></html>"
    with open("reports/agile_sprint_report.html", "w") as f:
        f.write(html_content)

def plot_burndown_chart(ax, df):
    df = df.sort_values(by='created_at')
    total_issues = len(df)
    df['remaining'] = total_issues - df.index
    ax.plot(df['created_at'], df['remaining'], marker='o', label='Remaining Issues')
    ax.set_title("Sprint Burndown Chart")

def plot_burnup_chart(ax, df):
    df['date'] = df['created_at'].dt.date
    df['count'] = 1
    burnup_data = df.groupby('date').count()[['count']].cumsum()
    ax.plot(burnup_data.index, burnup_data['count'], marker='o', label='Completed Work')
    ax.set_title("Sprint Burnup Chart")

def plot_cfd(ax, df):
    df['date'] = df['created_at'].dt.date
    df['count'] = 1
    cfd_data = df.groupby('date').count()[['count']].cumsum()
    ax.plot(cfd_data.index, cfd_data['count'], marker='o', label='Total Issues Opened')
    ax.set_title("Cumulative Flow Diagram")

def plot_velocity_chart(ax, df):
    df['sprint'] = df['created_at'].dt.to_period('W')
    velocity_data = df.groupby('sprint').count()[['title']]
    ax.bar(velocity_data.index.astype(str), velocity_data['title'], color='blue', label='Completed Issues')
    ax.set_title("Sprint Velocity Chart")

def plot_lead_cycle_time(ax, df):
    df['lead_time'] = (df['closed_at'] - df['created_at']).dt.days
    df = df.dropna()
    ax.hist(df['lead_time'], bins=10, color='green', alpha=0.7, label='Lead Time')
    ax.set_title("Lead Time & Cycle Time Histogram")

def plot_throughput_chart(ax, df):
    df['week'] = df['created_at'].dt.to_period('W')
    throughput_data = df.groupby('week').count()[['title']]
    ax.bar(throughput_data.index.astype(str), throughput_data['title'], color='purple', label='Completed Issues per Week')
    ax.set_title("Sprint Throughput Chart")

def main():
    os.makedirs("reports", exist_ok=True)
    issues = get_issues()
    df = process_issues(issues)
    
    images = {
        "Sprint Burndown Chart": plot_chart(df, "Sprint Burndown Chart", "Date", "Issues Remaining", "reports/burndown_chart.png", plot_burndown_chart),
        "Sprint Burnup Chart": plot_chart(df, "Sprint Burnup Chart", "Date", "Completed Work", "reports/burnup_chart.png", plot_burnup_chart),
        "Cumulative Flow Diagram": plot_chart(df, "Cumulative Flow Diagram", "Date", "Cumulative Issues", "reports/cfd_chart.png", plot_cfd),
        "Sprint Velocity Chart": plot_chart(df, "Sprint Velocity Chart", "Sprint", "Completed Issues", "reports/velocity_chart.png", plot_velocity_chart),
        "Lead Time & Cycle Time Histogram": plot_chart(df, "Lead Time & Cycle Time Histogram", "Days", "Issue Count", "reports/lead_cycle_time.png", plot_lead_cycle_time),
        "Sprint Throughput Chart": plot_chart(df, "Sprint Throughput Chart", "Week", "Completed Issues", "reports/throughput_chart.png", plot_throughput_chart),
    }
    
    generate_html_report(images)

if __name__ == "__main__":
    main()
