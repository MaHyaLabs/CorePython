import requests
import json
from jinja2 import Template
import os

# GitLab API settings
GITLAB_URL = "https://gitlab.com/api/v4"
PRIVATE_TOKEN = "YOUR_GITLAB_ACCESS_TOKEN"
PROJECT_ID = "YOUR_PROJECT_ID"
SLACK_WEBHOOK_URL = "YOUR_SLACK_WEBHOOK_URL"

# Fetch the last merged merge request
def fetch_last_merged_mr(target_branch="main"):
    url = f"{GITLAB_URL}/projects/{PROJECT_ID}/merge_requests"
    params = {
        "state": "merged",
        "target_branch": target_branch,
        "order_by": "updated_at",
        "sort": "desc",
        "per_page": 1
    }
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}
    response = requests.get(url, headers=headers, params=params)
    return response.json()[0] if response.status_code == 200 and response.json() else None

# Fetch details for the last MR
def get_mr_details(mr):
    mr_id = mr["id"]
    approvals_url = f"{GITLAB_URL}/projects/{PROJECT_ID}/merge_requests/{mr_id}/approvals"
    commits_url = f"{GITLAB_URL}/projects/{PROJECT_ID}/merge_requests/{mr_id}/commits"
    pipelines_url = f"{GITLAB_URL}/projects/{PROJECT_ID}/merge_requests/{mr_id}/pipelines"
    diff_url = f"{GITLAB_URL}/projects/{PROJECT_ID}/merge_requests/{mr_id}/changes"
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}
    
    approvals_response = requests.get(approvals_url, headers=headers).json()
    commits_response = requests.get(commits_url, headers=headers).json()
    pipelines_response = requests.get(pipelines_url, headers=headers).json()
    diff_response = requests.get(diff_url, headers=headers).json()
    
    approvals = [user["user"]["name"] for user in approvals_response.get("approved_by", [])]
    commits = [commit["title"] for commit in commits_response]
    pipeline = pipelines_response[0] if pipelines_response else {}
    pipeline_status = pipeline.get("status", "Unknown")
    pipeline_id = pipeline.get("id", "N/A")
    pipeline_web_url = pipeline.get("web_url", "N/A")
    diff_link = mr["web_url"] + "/diffs"
    
    return {
        "id": mr["iid"],
        "title": mr["title"],
        "description": mr["description"],
        "author": mr["author"]["name"],
        "merged_by": mr["merged_by"]["name"],
        "web_url": mr["web_url"],
        "source_branch": mr["source_branch"],
        "target_branch": mr["target_branch"],
        "labels": ", ".join(mr.get("labels", [])),
        "merge_date": mr.get("merged_at", "N/A"),
        "approvals": ", ".join(approvals) if approvals else "None",
        "commits": ", ".join(commits) if commits else "No commits",
        "pipeline_status": pipeline_status,
        "pipeline_id": pipeline_id,
        "pipeline_web_url": pipeline_web_url,
        "diff_link": diff_link,
        "assignee": mr.get("assignee", {}).get("name", "Unassigned"),
        "reviewer": ", ".join([r["name"] for r in mr.get("reviewers", [])]) if mr.get("reviewers") else "No reviewers"
    }

# Generate release notes using Jinja2 template (HTML output)
def generate_html_release_notes(mr):
    template_str = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Latest Merge Request Release Notes</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #333; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f4f4f4; }
        </style>
    </head>
    <body>
        <h1>Latest Merge Request Release Notes</h1>
        <table>
            <tr><th>Merge Request ID</th><td>{{ mr.id }}</td></tr>
            <tr><th>Title</th><td><a href="{{ mr.web_url }}">{{ mr.title }}</a></td></tr>
            <tr><th>Description</th><td>{{ mr.description }}</td></tr>
            <tr><th>Author</th><td>{{ mr.author }}</td></tr>
            <tr><th>Merged By</th><td>{{ mr.merged_by }}</td></tr>
            <tr><th>Source Branch</th><td>{{ mr.source_branch }}</td></tr>
            <tr><th>Target Branch</th><td>{{ mr.target_branch }}</td></tr>
            <tr><th>Approvals</th><td>{{ mr.approvals }}</td></tr>
            <tr><th>Commits</th><td>{{ mr.commits }}</td></tr>
            <tr><th>Labels</th><td>{{ mr.labels }}</td></tr>
            <tr><th>Merge Date</th><td>{{ mr.merge_date }}</td></tr>
            <tr><th>Pipeline Status</th><td>{{ mr.pipeline_status }}</td></tr>
            <tr><th>Pipeline ID</th><td>{{ mr.pipeline_id }}</td></tr>
            <tr><th>Pipeline Link</th><td><a href="{{ mr.pipeline_web_url }}">View Pipeline</a></td></tr>
            <tr><th>Difference Link</th><td><a href="{{ mr.diff_link }}">View Diffs</a></td></tr>
            <tr><th>Assignee</th><td>{{ mr.assignee }}</td></tr>
            <tr><th>Reviewer</th><td>{{ mr.reviewer }}</td></tr>
        </table>
    </body>
    </html>
    """
    template = Template(template_str)
    return template.render(mr=mr)

# Main function
def main():
    last_mr = fetch_last_merged_mr()
    if not last_mr:
        print("No recent merged merge requests found.")
        return
    
    mr_details = get_mr_details(last_mr)
    release_notes_html = generate_html_release_notes(mr_details)
    
    with open("release_notes.html", "w", encoding="utf-8") as f:
        f.write(release_notes_html)
    
    print("Release notes generated: release_notes.html")
    send_to_slack("New release notes generated: See attachment")

if __name__ == "__main__":
    main()
