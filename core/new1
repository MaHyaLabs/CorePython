lure generator

# honeypot_generator.py
import openai
import uuid
from config import *

openai.api_key = AZURE_OPENAI_API_KEY
openai.api_base = AZURE_OPENAI_ENDPOINT
openai.api_type = "azure"
openai.api_version = AZURE_OPENAI_API_VERSION

def generate_admin_api_lure():
    prompt = "Generate a fake admin login API endpoint path that looks realistic but is a honeypot for attackers. Return only the URL endpoint path (like /admin-login-123)."
    
    response = openai.ChatCompletion.create(
        engine=AZURE_OPENAI_DEPLOYMENT_NAME,
        messages=[
            {"role": "system", "content": "You are a security engineer creating deception lures."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=50
    )
    path = response['choices'][0]['message']['content'].strip()
    if not path.startswith("/"):
        path = "/" + path
    return path

----+++
# app.py
from flask import Flask, request, jsonify
from flask_apscheduler import APScheduler
from honeypot_generator import generate_admin_api_lure
import logging
import uuid

app = Flask(__name__)
scheduler = APScheduler()
scheduler.init_app(app)
scheduler.start()

HONEYPOT_ROUTES = {}

@app.route("/")
def index():
    return "🛡️ GenAI Honeypot Admin API Server Running!"

# --- Function to dynamically add honeypot route ---
def create_honeypot_route(path):
    def honeypot():
        ip = request.remote_addr
        logging.warning(f"🔥 Honeypot triggered at {path} from IP: {ip}")
        return jsonify({
            "error": "Unauthorized access attempt logged.",
            "honeypot_id": HONEYPOT_ROUTES[path]
        }), 403

    endpoint = f"honeypot_{uuid.uuid4().hex[:8]}"
    app.add_url_rule(path, endpoint, honeypot, methods=["GET", "POST"])
    HONEYPOT_ROUTES[path] = endpoint
    logging.info(f"✅ Honeypot created: {path} -> {endpoint}")

# --- Scheduler job ---
@scheduler.task('interval', id='generate_honeypot', minutes=10, misfire_grace_time=30)
def generate_and_add_honeypot():
    try:
        path = generate_admin_api_lure()
        if path not in HONEYPOT_ROUTES:
            create_honeypot_route(path)
        else:
            logging.info(f"🚫 Honeypot path already exists: {path}")
    except Exception as e:
        logging.error(f"❌ Failed to create honeypot: {e}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app.run(debug=True, port=5000)