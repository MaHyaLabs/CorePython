from flask import Flask, request, jsonify, send_file
import openai
import os
import json
import random
import string
import logging
from datetime import datetime

app = Flask(__name__)
HONEYPOT_DIR = "honeypot_configs"
LOG_FILE = "honeypot_access.log"
exposed_files = {}

# Setup directories and logging
os.makedirs(HONEYPOT_DIR, exist_ok=True)
logging.basicConfig(filename=LOG_FILE, level=logging.INFO)

# Azure OpenAI config - replace with your actual values or set as env variables
openai.api_type = "azure"
openai.api_base = os.getenv("AZURE_OPENAI_ENDPOINT", "https://your-instance.openai.azure.com/")
openai.api_version = "2023-05-15"
openai.api_key = os.getenv("AZURE_OPENAI_KEY", "your-azure-api-key")
deployment_id = os.getenv("AZURE_DEPLOYMENT_ID", "gpt-35-turbo")

# Generate unique filename
def random_filename():
    return "config-leak-" + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6)) + ".json"

# Route: Generate honeypot config file using Azure OpenAI
@app.route("/generate-honeypot-config", methods=["POST"])
def generate_honeypot_config():
    prompt = (
        "Generate a fake JSON configuration file that looks like it contains sensitive data. "
        "Include fields such as db_user, db_pass, api_key, secret_key, service_endpoint, "
        "and use realistic-looking but fake values. Keep it believable."
    )
    try:
        response = openai.ChatCompletion.create(
            engine=deployment_id,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=500
        )
        fake_config_text = response['choices'][0]['message']['content']

        # Save config to file
        filename = random_filename()
        filepath = os.path.join(HONEYPOT_DIR, filename)
        with open(filepath, "w") as f:
            f.write(fake_config_text)

        exposed_files[filename] = filepath
        logging.info(f"[LURE_CREATED] {filename} at {datetime.utcnow()}")

        return jsonify({
            "status": "success",
            "honeypot_url": f"/honeypot/{filename}"
        })

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

# Route: Honeypot config access (trap)
@app.route("/honeypot/<filename>", methods=["GET"])
def serve_honeypot_file(filename):
    filepath = os.path.join(HONEYPOT_DIR, filename)
    if not os.path.exists(filepath):
        return jsonify({"error": "File not found"}), 404

    ip = request.remote_addr
    logging.info(f"[HONEYPOT_TRIGGERED] {filename} accessed by {ip} at {datetime.utcnow()}")

    return send_file(filepath, mimetype="application/json")

# Route: View active exposed lures
@app.route("/active-lures", methods=["GET"])
def view_active_lures():
    return jsonify(list(exposed_files.keys()))

if __name__ == "__main__":
    print("Azure OpenAI Config Honeypot API running...")
    app.run(debug=True, port=5002)
